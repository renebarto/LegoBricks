<Window x:Class="LegoBricks.View.ColorEditForm"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LegoBricks"
        xmlns:vm="clr-namespace:LegoBricks.ViewModel"
        mc:Ignorable="d"
        Title="Edit Color" Height="250" Width="400">
    <Window.Resources>
        <vm:ModelBindingProxy x:Key="ModelProxy" Model="{Binding}"/>
        <vm:CheckExistingBindingProxy x:Key="CheckExistingProxy" CheckExisting="{Binding}"/>
        <ControlTemplate x:Key="ValidationTemplate">
            <DockPanel>
                <TextBlock Foreground="Red" FontSize="20">!</TextBlock>
                <AdornedElementPlaceholder/>
            </DockPanel>
        </ControlTemplate>

        <Style x:Key="TextBoxInError" TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Bottom">
            <Button DockPanel.Dock="Right" Content="OK" Width="100" Height="30" Click="OnClickOK" IsDefault="True">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ColorID}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ColorName}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ColorRGB}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ColorTransparent}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button DockPanel.Dock="Right" Content="Cancel" Width="100" Height="30" IsCancel="True" />
            <Grid/>
        </DockPanel>
        
        <StackPanel DockPanel.Dock ="Top" Orientation="Horizontal">
            <Label Content="ID" Width="100" />
            <TextBox Name="ColorID" Width="200" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" Style="{StaticResource TextBoxInError}" GotFocus="TextBox_GotFocus">
                <TextBox.Text>
                    <Binding Path="ColorID" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <vm:ColorIDRule ValidatesOnTargetUpdated="True">
                                <vm:ColorIDRule.ModelWrapper>
                                    <vm:ModelBindingWrapper Model="{Binding Model.Model, Source={StaticResource ModelProxy}}" />
                                </vm:ColorIDRule.ModelWrapper>
                                <vm:ColorIDRule.CheckExistingWrapper>
                                    <vm:CheckExistingBindingWrapper CheckExisting="{Binding CheckExisting.CheckExisting, Source={StaticResource CheckExistingProxy}}" />
                                </vm:ColorIDRule.CheckExistingWrapper>
                            </vm:ColorIDRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </StackPanel>

        <StackPanel DockPanel.Dock ="Top" Orientation="Horizontal">
            <Label Content="Name" Width="100" />
            <TextBox Name="ColorName" Width="200" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" Style="{StaticResource TextBoxInError}" GotFocus="TextBox_GotFocus">
                <TextBox.Text>
                    <Binding Path="ColorName" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <vm:ColorNameRule ValidatesOnTargetUpdated="True">
                                <vm:ColorNameRule.ModelWrapper>
                                    <vm:ModelBindingWrapper Model="{Binding Model.Model, Source={StaticResource ModelProxy}}" />
                                </vm:ColorNameRule.ModelWrapper>
                            </vm:ColorNameRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </StackPanel>


        <StackPanel DockPanel.Dock ="Top" Orientation="Horizontal">
            <Label Content="RGB" Width="100" />
            <TextBox Name="ColorRGB" Width="200" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" Style="{StaticResource TextBoxInError}" GotFocus="TextBox_GotFocus" LostFocus="RGB_LostFocus">
                <TextBox.Text>
                    <Binding Path="ColorRGB" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <vm:ColorRGBRule ValidatesOnTargetUpdated="True">
                                <vm:ColorRGBRule.ModelWrapper>
                                    <vm:ModelBindingWrapper Model="{Binding Model.Model, Source={StaticResource ModelProxy}}" />
                                </vm:ColorRGBRule.ModelWrapper>
                            </vm:ColorRGBRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </StackPanel>


        <StackPanel DockPanel.Dock ="Top" Orientation="Horizontal">
            <Label Content="Transparent" Width="100" />
            <CheckBox Name="ColorTransparent">
                <CheckBox.IsChecked>
                    <Binding Path="ColorTransparent" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <vm:ColorTransparentRule ValidatesOnTargetUpdated="True">
                                <vm:ColorTransparentRule.Wrapper>
                                    <vm:ModelBindingWrapper Model="{Binding Model.Model, Source={StaticResource ModelProxy}}" />
                                </vm:ColorTransparentRule.Wrapper>
                            </vm:ColorTransparentRule>
                        </Binding.ValidationRules>
                    </Binding>
                </CheckBox.IsChecked>
            </CheckBox>
        </StackPanel>

        <DockPanel>
            <Grid DockPanel.Dock="Right" Width="150" Background="{Binding ColorImageBackground, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <Grid/>
        </DockPanel>
    </DockPanel>
</Window>
